#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_nonuniform_qualifier : require

#include "structures.glsl"
#include "tools.glsl"
#include "material.glsl"
#include "sampling.glsl"

#include "../src/Bindings.h"
//#include "lambert.glsl"
//#include "disney2.glsl"
#include "disney.glsl"
#include "random.glsl"

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(push_constant) uniform State {
    uint path_length;
    uint path_count;
};

layout(set = 0, binding = cCOUNTERS) buffer Counters
{
    uint pathLength;
    uint scrWidth;
    uint scrHeight;
    uint pathCount;

    uint generated;
    uint extensionRays;
    uint shadowRays;
    uint probePixelIdx;

	int probedInstid;
    int probedTriid;
    float probedDist;
    float clampValue;

	uvec4 lightCounts;
};

layout(set = 0, binding = cAREALIGHT_BUFFER) buffer areaLightsBuffer { DeviceAreaLight areaLights[]; };
layout(set = 0, binding = cPOINTLIGHT_BUFFER) buffer pointLightsBuffer { DevicePointLight pointLights[]; };
layout(set = 0, binding = cSPOTLIGHT_BUFFER) buffer spotLightsBuffer { DeviceSpotLight spotLights[]; };
layout(set = 0, binding = cDIRECTIONALLIGHT_BUFFER) buffer directionalLightsBuffer { DeviceDirectionalLight directionalLights[]; };
layout(set = 0, binding = cCAMERA) uniform uniformCamera { CameraView camera; };

layout(set = 0, binding = cPATH_STATES) buffer pathStates { vec4 data[]; } states[2];
layout(set = 0, binding = cPATH_ORIGINS)  buffer pathOrigins { vec4 data[]; } origins[2];
layout(set = 0, binding = cPATH_DIRECTIONS) buffer pathDirections { vec4 data[]; } directions[2];
layout(set = 0, binding = cPATH_THROUGHPUTS) buffer pathThroughputs { vec4 data[]; } throughputs[2];

layout(set = 0, binding = cPOTENTIAL_CONTRIBUTIONS) buffer potentialContributionsBuffer { PotentialContribution potentialContributions[]; };
layout(set = 0, binding = cSKYBOX) uniform sampler2D skybox;
layout(set = 0, binding = cTRIANGLES) buffer triangleBuffers { DeviceTriangle tdata[]; } tbuffers[];
layout(set = 0, binding = cINVERSE_TRANSFORMS) buffer instanceInvTransform { mat4 invTransforms[]; };
layout(set = 0, binding = cACCUMULATION_BUFFER) buffer accumulationBuffer { vec4 acPixels[]; };
layout(set = 0, binding = cBLUENOISE) buffer   blueNoiseBuffer { int blueNoise[]; };

// path state flags
#define S_SPECULAR        1 // previous path vertex was specular
#define S_BOUNCED         2 // path encountered a diffuse vertex
#define S_VIASPECULAR     4 // path has seen at least one specular vertex

#define HIT_U (float(floatBitsToUint(pathState.x) & 65535) * (1.0f / 65535.0f))
#define HIT_V (float(floatBitsToUint(pathState.x) >> 16) * (1.0f / 65535.0f))
#define INSTANCEIDX floatBitsToUint(pathState.y)
#define PRIMIDX floatBitsToInt(pathState.z)
#define HIT_T pathState.w
#define RAY_O O4.xyz
#define FLAGS data
#define PATHIDX (data >> 8)

#define ISLIGHTS 1
#define MAXISLIGHTS 8

#define AREALIGHTCOUNT        lightCounts.x
#define POINTLIGHTCOUNT       lightCounts.y
#define SPOTLIGHTCOUNT        lightCounts.z
#define DIRECTIONALLIGHTCOUNT lightCounts.w

vec3 RandomBarycentrics(const float r0);
float PotentialAreaLightContribution(const int idx, const vec3 O, const vec3 N, const vec3 I, const vec3 bary);
float PotentialPointLightContribution(const int idx, const vec3 I, const vec3 N);
float PotentialSpotLightContribution(const int idx, const vec3 I, const vec3 N);
float PotentialDirectionalLightContribution(const int idx, const vec3 I, const vec3 N);
float LightPickProb(const int idx, const vec3 O, const vec3 N, const vec3 I);
float CalculateLightPDF(const vec3 D, const float t, const float lightArea, const vec3 lightNormal);
vec3 RandomPointOnLight(float r0, float r1, const vec3 I, const vec3 N, inout float pickProb, inout float lightPdf, inout vec3 lightColor);
float blueNoiseSampler(int x, int y, int sampleIdx, int sampleDimension);

void main()
{
    const uint currentIndex = gl_GlobalInvocationID.x;
    if (currentIndex >= path_count) return;

    const uint shadeBufferIndex = (path_length & 1);   // Buffers used to shade current rays
	const uint nextBufferIndex = 1 - shadeBufferIndex; // Buffers used for next extension stage

    const vec4 O4 = origins[shadeBufferIndex].data[currentIndex];
    uint data = floatBitsToUint(O4.w);
    const uint pathIdx = PATHIDX;

    const vec4 pathState = states[shadeBufferIndex].data[currentIndex];
    const vec4 T4 = pathLength == 1 ? vec4(1.0) : throughputs[shadeBufferIndex].data[currentIndex];
    const vec4 D4 = directions[shadeBufferIndex].data[currentIndex];

    vec3 throughput = T4.xyz;
    const float bsdfPdf = T4.w;

    const int prim_id = PRIMIDX;
    const uint pixelIdx = pathIdx % (scrWidth * scrHeight);

    if (prim_id < 0)
    {
        const vec2 uv = vec2(0.5f * (1.0f + atan(D4.x, -D4.z) * INVPI), acos(D4.y) * INVPI);
        vec3 contribution = throughput * texture(skybox, uv).rgb * (1.0f / bsdfPdf);
        if (!any(isnan(contribution)))
		{
			CLAMPINTENSITY(contribution, clampValue);
			acPixels[pixelIdx] += vec4(contribution, 0.0);
		}
        return;
    }

	const uint instance_id =  INSTANCEIDX;
	const uint sampleIdx = pathIdx / (scrWidth * scrHeight) + camera.samplesTaken;

    if ((sampleIdx + pathLength) == 1 && pixelIdx == probePixelIdx)
    {
        probedInstid = int(instance_id);
        probedTriid = prim_id;
        probedDist = HIT_T;
    }

    const vec3 D = D4.xyz;
    const vec3 I = O4.xyz + HIT_T * D;

	const DeviceTriangle tri = tbuffers[instance_id].tdata[prim_id];
    ShadingData shadingData;
    vec3 N, iN, T, B;
    GetShadingData(D, HIT_U, HIT_V, camera.right_spreadAngle.w * HIT_T, tri,
				   shadingData, N, iN, T, B, mat3(invTransforms[instance_id]));
    if ((floatBitsToUint(shadingData.color.w) & 1u) == 1u)// Check if object hit was translucent
    {
        if (pathLength < MAXPATHLENGTH)// Create extension ray
        {
            const uint extensionRayIdx = atomicAdd(extensionRays, 1);
			origins[nextBufferIndex].data[extensionRayIdx] = vec4(SafeOrigin(I, D, iN, camera.geometryEpsilon), O4.w);
            directions[nextBufferIndex].data[extensionRayIdx] = vec4(D, 0.0);
            throughputs[nextBufferIndex].data[extensionRayIdx] = T4;
        }
        return;
    }

    // Terminate path on light
    if (any(greaterThan(shadingData.color.xyz, vec3(1.0)))) /* r, g or b exceeds 1 */
    {
        const float DdotNL = -dot(D, N);
        vec3 contribution = vec3(0);
        if (DdotNL > 0)
        {
			if (pathLength == 1 || (FLAGS & S_VIASPECULAR) != 0)
				contribution = throughput * shadingData.color.xyz;
            else
            {
                // Last vertex was not specular: apply MIS
                const vec3 lastN = UnpackNormal(floatBitsToUint(D4.w));
                const float lightPdf = CalculateLightPDF(D, HIT_T, shadingData.absorption.w, N);
                const float pickProb = LightPickProb(floatBitsToInt(tri.u4.w), RAY_O, lastN, I /* the N at the previous vertex */);
                if ((bsdfPdf + lightPdf * pickProb) <= 0)
					return;

                contribution = throughput * shadingData.color.xyz * (1.0f / (bsdfPdf + lightPdf * pickProb));
            }
        }


		if (any(isnan(throughput)))
			throughput = vec3(0.0f);

        CLAMPINTENSITY(contribution, clampValue);
        acPixels[pixelIdx] += vec4(throughput, 0);
        return;
    }

    uint seed = WangHash(pathIdx * 16789 + camera.samplesTaken * 1791 + pathLength * 720898027);
    const float flip = (dot(D, N) > 0) ? -1.0f : 1.0f;

    N *= flip;// Fix geometric normal
    iN *= flip;// Fix interpolated normal (consistent normal interpolation)
    throughput *= 1.0f / bsdfPdf;// Apply postponed bsdf pdf

	// Only cast shadow rays for non-specular objects
    if (ROUGHNESS >= 0.01f && any(greaterThan(lightCounts, uvec4(0))))
    {
		FLAGS &= ~S_SPECULAR;// Object was not specular

        vec3 lightColor;
        float r0, r1, pickProb, lightPdf;
#if BLUENOISE
        if (sampleIdx < 256)
        {
            const int x = int(pixelIdx % scrWidth);
            const int y = int(pixelIdx / scrWidth);
            r0 = blueNoiseSampler(x, y, int(sampleIdx), int(4 + 4 * pathLength));
            r1 = blueNoiseSampler(x, y, int(sampleIdx), int(5 + 4 * pathLength));
        }
        else
        {
            r0 = RandomFloat(seed);
            r1 = RandomFloat(seed);
        }
#else
		r0 = RandomFloat(seed);
        r1 = RandomFloat(seed);
#endif

        vec3 L = RandomPointOnLight(r0, r1, I, iN, pickProb, lightPdf, lightColor) - I;
        const float dist = length(L);
        L *= 1.0f / dist;
        const float NdotL = dot(L, iN);
        if (NdotL > 0 && lightPdf > 0)
        {
            float shadowPdf;
            const vec3 sampledBSDF = EvaluateBSDF(shadingData, iN, T, B, D * -1.0f, L, shadowPdf);
            if (shadowPdf > 0)
            {
                // calculate potential contribution
                vec3 contribution = throughput * sampledBSDF * lightColor * (NdotL / (shadowPdf + lightPdf * pickProb));
                CLAMPINTENSITY(contribution, clampValue);
				if (!any(isnan(contribution)))
				{
					// Add fire-and-forget shadow ray to the connections buffer
					const uint shadowRayIdx = atomicAdd(shadowRays, 1); // compaction

					potentialContributions[shadowRayIdx].Origin = vec4(I, 0);
					potentialContributions[shadowRayIdx].Direction = vec4(L, dist - 2.0 * camera.geometryEpsilon);
					potentialContributions[shadowRayIdx].Emission_pixelIdx = vec4(contribution, uintBitsToFloat(pixelIdx));
				}
            }
        }
    }
	else
	{
		FLAGS |= S_SPECULAR;// Object was specular
	}

	if ((FLAGS & S_BOUNCED) > 0) return;

    // Depth cap
    if (pathLength > MAXPATHLENGTH) // Early out in case we reached maximum path length
		return;

    vec3 R;
    float newBsdfPdf, r3, r4;
#if BLUENOISE
    if (sampleIdx < 256)// Blue noise
    {
        const int x = int(pixelIdx % scrWidth) & 127;
        const int y = int(pixelIdx / scrWidth) & 127;
        r3 = blueNoiseSampler(x, y, int(sampleIdx), int(6 + 4 * pathLength));
        r4 = blueNoiseSampler(x, y, int(sampleIdx), int(7 + 4 * pathLength));
    }
    else
    {
        r3 = RandomFloat(seed);
        r4 = RandomFloat(seed);
    }
#else
    r3 = RandomFloat(seed);
    r4 = RandomFloat(seed);
#endif

	bool specular;
    const vec3 bsdf = SampleBSDF(shadingData, iN, N, T, B, D * -1.0f, HIT_T, flip < 0, r3, r4, R, newBsdfPdf, specular);
	if (newBsdfPdf < 1e-6f || isnan(newBsdfPdf))
		return;

	throughput = throughput *
			//1.0f / SurvivalProbability(throughput) *
			bsdf * abs(dot(iN, R));
	if (any(isnan(throughput)))
		throughput = vec3(0);

	if ((FLAGS & S_SPECULAR) == 0) FLAGS |= S_BOUNCED;
	else FLAGS |= S_VIASPECULAR;

    const uint extensionRayIdx = atomicAdd(extensionRays, 1);// Get compacted index for extension ray

    origins[nextBufferIndex].data[extensionRayIdx] = vec4(I, uintBitsToFloat(FLAGS));
    directions[nextBufferIndex].data[extensionRayIdx] = vec4(R, uintBitsToFloat(PackNormal(iN)));
    throughputs[nextBufferIndex].data[extensionRayIdx] = vec4(throughput, newBsdfPdf);
}

float PotentialAreaLightContribution(const int idx, const vec3 O, const vec3 N, const vec3 I, const vec3 bary)
{
    const DeviceAreaLight light = areaLights[idx];
    const vec4 posEnergy = light.position_energy;
    const vec3 LN = light.normal_area.xyz;
    vec3 L = I;
    if (bary.x >= 0)
    {
        const vec3 V0 = light.vertex0_triIdx.xyz;
        const vec3 V1 = light.vertex1_instIdx.xyz;
        const vec3 V2 = light.vertex2.xyz;
        L = bary.x * V0 + bary.y * V1 + bary.z * V2;
    }
    L = L - O;
    const float att = 1.0f / dot(L, L);
    L = normalize(L);
    const float LNdotL = max(0.0f, -dot(LN, L));
    const float NdotL = max(0.0f, dot(N, L));
    return posEnergy.w * LNdotL * NdotL * att;
}

float PotentialPointLightContribution(const int idx, const vec3 I, const vec3 N)
{
    const DevicePointLight light = pointLights[idx];
    const vec4 position4 = light.position_energy;
    const vec3 L = position4.xyz - I;
    const float NdotL = max(0.0f, dot(N, L));
    const float att = 1.0f / dot(L, L);
    return position4.w * NdotL * att;
}

float PotentialSpotLightContribution(
const int idx, const vec3 I, const vec3 N)
{
    const DeviceSpotLight light = spotLights[idx];
    const vec4 position4 = light.position_cosInner;
    const vec4 radiance4 = light.radiance_cosOuter;
    const vec4 direction4 = light.direction_energy;

    vec3 L = position4.xyz - I;
    const float att = 1.0f / dot(L, L);
    L = normalize(L);
    const float d = (-dot(L, direction4.xyz) - radiance4.w) / (position4.w - radiance4.w);
    const float NdotL = dot(N, L);
    const float LNdotL = clamp(d, 0.0f, 1.0f);
    return (radiance4.x + radiance4.y + radiance4.z) * LNdotL * NdotL * att * direction4.w;
}

float PotentialDirectionalLightContribution(const int idx, const vec3 I, const vec3 N)
{
    const DeviceDirectionalLight light = directionalLights[idx];
    const vec4 direction4 = light.direction_energy;
    const float LNdotL = -dot(direction4.xyz, N);
    return direction4.w * LNdotL;
}

float CalculateLightPDF(const vec3 D, const float t, const float lightArea, const vec3 lightNormal)
{
    return (t * t) / (-dot(D, lightNormal) * lightArea);
}

float LightPickProb(const int idx, const vec3 O, const vec3 N, const vec3 I)
{
#if ISLIGHTS
    // for implicit connections; calculates the chance that the light would have been explicitly selected
    float potential[MAXISLIGHTS];
    float sum = 0;
    for (int i = 0; i < AREALIGHTCOUNT; i++) 
	{ 
		const float c = max(0.0f, PotentialAreaLightContribution(i, O, N, I, vec3(-1))); 
		potential[i] = c;
		sum += c;
	}
	for (int i = 0; i < POINTLIGHTCOUNT; i++) 
	{ 
		const float c = max(0.0f, PotentialPointLightContribution(i, O, N));
		sum += c; 
	}
    for (int i = 0; i < SPOTLIGHTCOUNT; i++) 
	{ 
		const float c = max(0.0f, PotentialSpotLightContribution(i, O, N)); 
		sum += c; 
	}
    for (int i = 0; i < DIRECTIONALLIGHTCOUNT; i++) 
	{ 
		const float c = max(0.0f, PotentialDirectionalLightContribution(i, O, N)); 
		sum += c; 
	}
    if (sum <= 0)
		return 0;// no potential lights found
    return potential[idx] / sum;
#else
    return 1.0f / (AREALIGHTCOUNT + POINTLIGHTCOUNT + SPOTLIGHTCOUNT + DIRECTIONALLIGHTCOUNT);
#endif
}

// https://pharr.org/matt/blog/2019/02/27/triangle-sampling-1.html
vec3 RandomBarycentrics(const float r0)
{
    const uint uf = uint(r0 * uint(4294967295));
    vec2 A = vec2(1.0f, 0.0f);
    vec2 B = vec2(0.0f, 1.0f);
    vec2 C = vec2(0.0f, 0.0f);

    for (int i = 0; i < 16; ++i)
    {
        const int d = int((uf >> (2 * (15 - i))) & 0x3);
        vec2 An, Bn, Cn;
        switch (d)
        {
            case 0:
				An = (B + C) * 0.5f;
				Bn = (A + C) * 0.5f;
				Cn = (A + B) * 0.5f;
				break;
            case 1:
				An = A;
				Bn = (A + B) * 0.5f;
				Cn = (A + C) * 0.5f;
				break;
            case 2:
				An = (B + A) * 0.5f;
				Bn = B;
				Cn = (B + C) * 0.5f;
				break;
            case 3:
				An = (C + A) * 0.5f;
				Bn = (C + B) * 0.5f;
				Cn = C;
				break;
        }
        A = An;
		B = Bn;
		C = Cn;
    }
    const vec2 r = (A + B + C) * 0.3333333f;
    return vec3(r.x, r.y, 1 - r.x - r.y);
}

vec3 RandomPointOnLight(float r0, float r1, const vec3 I, const vec3 N, inout float pickProb, inout float lightPdf, inout vec3 lightColor)
{
    const float lightCount = AREALIGHTCOUNT + POINTLIGHTCOUNT + SPOTLIGHTCOUNT + DIRECTIONALLIGHTCOUNT;
    // predetermine the barycentrics for any area light we sample
    const vec3 bary = RandomBarycentrics(r0);
#if ISLIGHTS
    // importance sampling of lights, pickProb is per-light probability
    float potential[MAXISLIGHTS];
    float sum = 0;
	float total = 0;
    int lights = 0;
	int lightIdx = 0;
    for (int i = 0; i < AREALIGHTCOUNT; i++)
	{
		float c = PotentialAreaLightContribution(i, I, N, vec3(0), bary);
		potential[lights++] = c;
		sum += c;
	}
    for (int i = 0; i < POINTLIGHTCOUNT; i++)
	{
		float c = PotentialPointLightContribution(i, I, N);
		potential[lights++] = c;
		sum += c;
	}
    for (int i = 0; i < SPOTLIGHTCOUNT; i++)
	{
		float c = PotentialSpotLightContribution(i, I, N);
		potential[lights++] = c;
		sum += c;
	}
    for (int i = 0; i < DIRECTIONALLIGHTCOUNT; i++)
	{
		float c = PotentialDirectionalLightContribution(i, I, N);
		potential[lights++] = c;
		sum += c;
	}
    if (sum <= 0)// no potential lights found
    {
        lightPdf = 0;
        return vec3(1 /* light direction; don't return 0 or nan, this will be slow */);
    }
    r1 *= sum;
    for (int i = 0; i < lights; i++)
    {
        total += potential[i];
        if (total >= r1)
		{
			lightIdx = i;
			break;
		}
    }
    pickProb = potential[lightIdx] / sum;
#else
    // uniform random sampling of lights, pickProb is simply 1.0 / lightCount
    pickProb = 1.0f / lightCount;
    int lightIdx = int(r0 * lightCount);
    r0 = (r0 - float(lightIdx) * (1.0f / lightCount)) * lightCount;
#endif
    lightIdx = clamp(lightIdx, 0, int(lightCount) - 1);
    if (lightIdx < AREALIGHTCOUNT)
    {
        // pick an area light
        const DeviceAreaLight light = areaLights[lightIdx];
        const vec4 V0 = light.vertex0_triIdx;// vertex0
        const vec4 V1 = light.vertex1_instIdx;// vertex1
        const vec4 V2 = light.vertex2;// vertex2
        lightColor = light.radiance.xyz;// radiance
        const vec4 LN = light.normal_area;// N
        const vec3 P = bary.x * V0.xyz + bary.y * V1.xyz + bary.z * V2.xyz;
        vec3 L = I - P; // reversed: from light to intersection point
        const float sqDist = dot(L, L);
        L = normalize(L);
        const float LNdotL = dot(L, LN.xyz);
        const float reciSolidAngle = sqDist / (LN.w * LNdotL);
        lightPdf = (LNdotL > 0 && dot(L, N) < 0) ? reciSolidAngle : 0;
        return P;
    }

	if (lightIdx < (AREALIGHTCOUNT + POINTLIGHTCOUNT))
    {
        // pick a pointlight
        const DevicePointLight light = pointLights[lightIdx - AREALIGHTCOUNT];
        const vec4 pos4 = light.position_energy;// position
        lightColor = vec3(light.radiance) * pos4.w;// radiance
        const vec3 L = I - pos4.xyz;// reversed
        const float sqDist = dot(L, L);
        lightPdf = dot(L, N) < 0 ? sqDist : 0;
        return pos4.xyz;
    }

	if (lightIdx < (AREALIGHTCOUNT + POINTLIGHTCOUNT + SPOTLIGHTCOUNT))
    {
        // pick a spotlight
        const DeviceSpotLight light = spotLights[lightIdx - (AREALIGHTCOUNT + POINTLIGHTCOUNT)];
        const vec4 P = light.position_cosInner;// position + cos_inner
        const vec4 E = light.radiance_cosOuter;// radiance + cos_outer
        const vec4 D = light.direction_energy;// direction
        const vec3 pos = P.xyz;
        vec3 L = I - P.xyz;
        const float sqDist = dot(L, L);
        L = normalize(L);
        const float d = max(0.0f, dot(L, D.xyz) - E.w) / (P.w - E.w);
        const float LNdotL = min(1.0f, d);
        lightPdf = (LNdotL > 0 && dot(L, N) < 0) ? (sqDist / LNdotL) : 0;
        lightColor = E.xyz * D.w;
        return pos;
    }

    // pick a directional light
    const DeviceDirectionalLight light = directionalLights[lightIdx - (AREALIGHTCOUNT + POINTLIGHTCOUNT + SPOTLIGHTCOUNT)];
    const vec4 L4 = light.direction_energy;// direction
    lightColor = light.radiance.xyz * L4.w;// radiance
    const float NdotL = dot(L4.xyz, N);
    lightPdf = NdotL < 0 ? 1 : 0;
    return I - 1000.0f * L4.xyz;
}

float blueNoiseSampler(int x, int y, int sampleIdx, int sampleDimension)
{
    // wrap arguments
    x &= 127;
    y &= 127;
    sampleIdx &= 255;
    sampleDimension &= 255;

    // xor index based on optimized ranking
    int rankedSampleIndex = sampleIdx ^ blueNoise[sampleDimension + (x + y * 128) * 8 + 65536 * 3];

    // fetch value in sequence
    int value = blueNoise[sampleDimension + rankedSampleIndex * 256];

    // if the dimension is optimized, xor sequence value based on optimized scrambling
    value ^= blueNoise[(sampleDimension & 7) + (x + y * 128) * 8 + 65536];

    // convert to float and return
    return (0.5f + value) * (1.0f / 256.0f);
}