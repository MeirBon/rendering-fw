#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_tracing : require

#include "../src/Bindings.h"
#include "structures.glsl"
#include "tools.glsl"
#include "random.glsl"

layout(push_constant) uniform State {
	uint pathLength;
	uint pathCount;
	uint phase;
};

layout( set = 0, binding = rtACCUMULATION_BUFFER ) buffer accumulationBuffer { vec4 acPixels[]; };
layout( set = 0, binding = rtACCELERATION_STRUCTURE ) uniform accelerationStructureEXT scene;
layout( set = 0, binding = rtCAMERA ) uniform uniformCamera { CameraView camera; };

layout( set = 0, binding = rtPATH_STATES ) buffer pathStates { vec4 data[]; } states[2];
layout( set = 0, binding = rtPATH_ORIGINS ) buffer pathOrigins { vec4 data[]; } origins[2];
layout( set = 0, binding = rtPATH_DIRECTIONS ) buffer pathDirections { vec4 data[]; } directions[2];

layout( set = 0, binding = rtPOTENTIAL_CONTRIBUTIONS ) buffer potentialContributionsBuffer { PotentialContribution potentialContributions[]; };
layout( set = 0, binding = rtBLUENOISE ) buffer blueNoiseBuffer { int blueNoise[]; };

layout( location = 0 ) rayPayloadEXT vec4 hitData;
layout( location = 1 ) rayPayloadEXT int occluded;

float blueNoiseSampler(int x, int y, int sampleIdx, int sampleDimension)
{
	// wrap arguments
	x &= 127;
	y &= 127;
	sampleIdx &= 255;
	sampleDimension &= 255;

	// xor index based on optimized ranking
	int rankedSampleIndex = sampleIdx ^ blueNoise[sampleDimension + (x + y * 128) * 8 + 65536 * 3];

	// fetch value in sequence
	int value = blueNoise[sampleDimension + rankedSampleIndex * 256];

	// if the dimension is optimized, xor sequence value based on optimized scrambling
	value ^= blueNoise[(sampleDimension & 7) + (x + y * 128) * 8 + 65536];

	// convert to float and return
	return (0.5f + value) * (1.0f / 256.0f);
}

void GenerateEyeRay(inout vec3 O, inout vec3 D, const uint pixelIdx, const uint sampleIdx, inout uint seed)
{
	const int sx = int(pixelIdx) % camera.scrwidth;
	const int sy = int(pixelIdx) / camera.scrwidth;

	float r0, r1, r2, r3;
	if (sampleIdx < 256)
	{
		r0 = blueNoiseSampler(sx, sy, int(sampleIdx), 0);
		r1 = blueNoiseSampler(sx, sy, int(sampleIdx), 1);
		r2 = blueNoiseSampler(sx, sy, int(sampleIdx), 2);
		r3 = blueNoiseSampler(sx, sy, int(sampleIdx), 3);
	}
	else
	{
		r0 = RandomFloat(seed);
		r1 = RandomFloat(seed);
		r2 = RandomFloat(seed);
		r3 = RandomFloat(seed);
	}
	
	const float blade = int(r0 * 9);
	r2 = (r2 - blade * (1.0f / 9.0f)) * 9.0f;
	float x1, y1, x2, y2;
	float piOver4point5 = 3.14159265359f / 4.5f;

	x1 = cos(blade * piOver4point5);
	y1 = sin(blade * piOver4point5);
	x2 = cos((blade + 1.0f) * piOver4point5);
	y2 = sin((blade + 1.0f) * piOver4point5);
	if ((r2 + r3) > 1.0f)
	{
		r2 = 1.0f - r2;
		r3 = 1.0f - r3;
	}
	const float xr = x1 * r2 + x2 * r3;
	const float yr = y1 * r2 + y2 * r3;
	const vec3 p1 = camera.p1.xyz;
	const vec3 right = camera.right_spreadAngle.xyz;
	const vec3 up = camera.up.xyz;

	O = vec3(camera.pos_lensSize.xyz) + camera.pos_lensSize.w * (right * xr + up * yr);
	const float u = (float(sx) + r0) * (1.0f / float(camera.scrwidth));
	const float v = (float(sy) + r1) * (1.0f / float(camera.scrheight));
	const vec3 pointOnPixel = p1 + u * right + v * up;
	D = normalize(pointOnPixel - O);
}

void main()
{
	const int pathIdx = int( gl_LaunchIDEXT.x );
	if (pathIdx > pathCount) return; // Check bounds

	const uint shadeBufferIndex = (pathLength % 2); // Buffers used to shade current rays
	//const uint shadeBufferIndex =  0; // Buffers used to shade current rays

	const uint cullMask = 0xFF;

	if (phase == STAGE_PRIMARY_RAY)
	{
		const uint samplesTaken = camera.samplesTaken;

		vec3 O, D;
		const int scrwidth = camera.scrwidth;
		const int scrheight = camera.scrheight;
		const uint pixelIdx = pathIdx % (scrwidth * scrheight);
		const uint sampleIdx = pathIdx / (scrwidth * scrheight) + samplesTaken;
		uint seed = WangHash( pathIdx * 16789 + samplesTaken * 1791 );
		GenerateEyeRay(O, D, pixelIdx, sampleIdx, seed);

		traceRayEXT(
			scene,
			gl_RayFlagsOpaqueEXT,
			cullMask,
			0 /*sbtRecordOffset*/,
			0 /*sbtRecordStride*/,
			0 /*missIndex*/,
			O /*origin*/,
			10 * camera.geometryEpsilon /*tmin*/,
			D /*direction*/,
			1e26f /*tmax*/,
			0 /*payload location*/
		);

		states[shadeBufferIndex].data[pathIdx] = hitData;
		origins[shadeBufferIndex].data[pathIdx] = vec4(O, uintBitsToFloat((pathIdx << 8) + 1));
		directions[shadeBufferIndex].data[pathIdx] = vec4(D, 0.0);
	}
	else if (phase == STAGE_SECONDARY_RAY)
	{
		const vec4 O = origins[shadeBufferIndex].data[pathIdx];
		const vec4 D = directions[shadeBufferIndex].data[pathIdx];

		traceRayEXT(
			scene,
			gl_RayFlagsOpaqueEXT,
			cullMask,
			0 /*sbtRecordOffset*/,
			0 /*sbtRecordStride*/,
			0 /*missIndex*/,
			O.xyz /*origin*/,
			10 * camera.geometryEpsilon /*tmin*/,
			D.xyz /*direction*/,
			1e26f /*tmax*/,
			0 /*payload location*/
		);

		states[shadeBufferIndex].data[pathIdx] = hitData;
	}
	else if (phase == STAGE_SHADOW_RAY)
	{
		const vec3 O = potentialContributions[pathIdx].Origin.xyz;
		const vec4 D = potentialContributions[pathIdx].Direction;

		occluded = 1;

		traceRayEXT(
			scene,
			gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsOpaqueEXT | gl_RayFlagsSkipClosestHitShaderEXT,
			cullMask,
			1 /*sbtRecordOffset*/,
			0 /*sbtRecordStride*/,
			0 /*missIndex*/,
			O /*origin*/,
			100 * camera.geometryEpsilon,
			D.xyz /*direction*/,
			D.w - 2.0 * camera.geometryEpsilon /*tmax*/,
			1 /*payload location*/
		);

		if (occluded == 1) return;

		const vec4 E_Idx = potentialContributions[pathIdx].Emission_pixelIdx;
		const uint pixelIdx = floatBitsToUint(E_Idx.w);
		acPixels[pixelIdx] += vec4(E_Idx.xyz, 0.0);
	}
}
